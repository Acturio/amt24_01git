[["repositorio-nuevo.html", "Capítulo 4 Repositorio nuevo 4.1 Preparación de repositorio 4.2 Viajes en los registros 4.3 Cambiar de nombre y eliminar archivos 4.4 Ignorar archivos no deseados 4.5 Resumen 4.6 Merge: Fast-forward 4.7 Merge: Unión automática 4.8 Merge: Uniones con conflictos", " Capítulo 4 Repositorio nuevo En este capítulo vamos a simular distintos escenarios en los que nos podemos encontrar al desarrollar un proyecto; Vamos a trabajar ahora con la carpeta material-marvel, que se proporcionará por los instructores, y pondremos en practica los conocimientos adquiridos hasta ahora a la vez que profundizamos en las distintas opciones que nos proporciona la herramienta Git. Con ese propósito vamos a seguir una narrativa en la cual nos encontramos desarrollando un proyecto de Marvel. 4.1 Preparación de repositorio Primero vamos a preparar el repositorio y haremos que Git rastreé los cambios relalizados en el proyecto. Desde la terminal, nos colocamos en la ubicación de la carpeta material-marvel/ e inicializamos un repositorio de Git con git init Inicializado repositorio Git vacío en [path]/material-marvel/.git/ Uno por uno, vamos a registrar los archivos: README.md, descripciones.md, origenes.md, debilidades.md y el directorio misiones/ (haciendo commit); recuerde que debes llevarlos al Satage con git add [elemento] para luego poder registrarlos con un mensaje a traves de git commit -m &quot;[elemento] agregado&quot; [main (commit-raíz) ac02fe0] [elemento] agregado 1 file changed, 17 insertions(+) create mode 100644 [elemento] Vamos a cambiar el mensaje de registro que hicimos al guardar el directorio misiones/, para ello usaremos git commit --amend misiones/ agregado # Please enter the commit message for your changes. Lines starting # with &#39;#&#39; will be ignored, and an empty message aborts the commit. # # Fecha: Wed Jan 15 16:29:04 2025 -0600 # # En la rama main # Cambios a ser confirmados: # nuevos archivos: misiones/black_widow.md # nuevos archivos: misiones/hulk.md # nuevos archivos: misiones/iron_man.md # nuevos archivos: misiones/spider_man.md # nuevos archivos: misiones/thor.md # Este comando abrirá el editor de texto por defecto de cada equipo para mostrar un archivo de registro, el cual vamos a editar de la siguiente manera: La primera línea, donde se encuentra escrito misiones/ agregado, cambiaremos ese mensaje por: misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. Y guardemos los cambios en el archivo de registro. Con los registros realizados hasta ahora, tomando en cuenta que se suguió la recomendación de alias presentada al final del Capítulo 2, usando git lg deberiamos tener una salida como la que sigue git lg * a2427e8 - (hace 2 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] (HEAD -&gt; main) * 43b3a69 - (hace 3 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 3 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 4 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 4 minutos) README.md agregado - [Nombre de usuario]% 4.2 Viajes en los registros Ya que Git rastrea todos los elementos involucrados en el proyecto empezamos a hacer cambios para, posteriormente, realizar los viajes en los commits realizados. Empezando con la edición de archivos, en el archivo README.md se encontrarán con una lista de clases de números, a la que le agregaremos, al final, el siguiente elemento: - [doctor strange](/misiones/doctor_strange.md) Luego, al archivo descripciones.md le vamos a agregar: ## Doctor Strange - **Nombre real:** Stephen Vincent Strange. - **Descripción:** Un neurocirujano convertido en el Hechicero Supremo, protector de la Tierra. Después, en el archivo origenes.md añadimos: ## Doctor Strange - Tras un accidente automovilístico que dañó gravemente sus manos, aprendió las artes místicas y se convirtió en el Hechicero Supremo. Por último, en el archivo debilidades.md agregamos: ## Doctor Strange - Dependencia de artefactos mágicos. - Relaciones humanas complejas. Ahora, agregamos las misiones de Doctor Strange en el archivo misiones/doctor_strange.md: # Misiones de Doctor Strange 1. **Recuperar la Gema del Tiempo** - **Descripción:** Investigar el paradero de la Gema del Tiempo tras los eventos en Kamar-Taj y recuperarla antes de que caiga en manos equivocadas. - **Prioridad:** Alta - **Fecha límite:** 2025-02-10 2. **Sellar un portal a la Dimensión Oscura** - **Descripción:** Viajar a Hong Kong para cerrar un portal que amenaza con desestabilizar el equilibrio entre dimensiones. - **Prioridad:** Alta - **Fecha límite:** 2025-01-28 3. **Reclutar un nuevo aprendiz** - **Descripción:** Encontrar a un nuevo candidato prometedor en el mundo y entrenarlo en las artes místicas. - **Prioridad:** Media - **Fecha límite:** 2025-03-15 Tras los cambios anteriormente realizados, haremos una verificación. git s ## main M README.md M debilidades.md M descripciones.md M origenes.md ?? misiones/doctor_strange.md Prara darle seguimiento, agregamos al área de preparación el archivo misiones/doctor_strange.md git add misiones/doctor_strange.md Así, de ahora en adelante, git le dará seguimiento a las misiones de Doctor Strange. Ahora haremos un nuevo commit con el siguiente comando. git commit -am &quot;Se une Deoctor Strange&quot; [main 9c59afe] Se une Deoctor Strange 5 files changed, 33 insertions(+) create mode 100644 misiones/doctor_strange.md Comenzaremos con los viajes en el tiempo, primero veamos nuestra línea del tiempo con git lg * 9c59afe - (hace 31 segundos) Se une Deoctor Strange - [Nombre de usuario] (HEAD -&gt; main) * a2427e8 - (hace 10 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] * 43b3a69 - (hace 11 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 12 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 12 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 12 minutos) README.md agregado - [Nombre de usuario]% Vemos todos los registros que hemos hecho hasta ahora, pero supongamos que a la vez se unió Daredevil por lo que quermeos agregarlo también, pero en lugar de hacer un nuevo commit, buscamos que sean agregados a la vez. Para ello, vamos a usar el comando git reset --soft, pero recordemos que este nos permite darle la entrade HEAD^ o en su lugar el hash de registro del commit al que nos vamos a mover; esta vez usaremos esta segunda forma, en este caso el parámetro que usaremos es el penúltimo [hash] que mostró el comando git lg, por lo que emplearemos git reset --soft [hash] Ahora podemos agregar los números complejos para registrarlos junto a los imaginarios, lo que haremos como anteriormente: Creamos el archivo misiones/daredevil.md y le agregamos: # Misiones de Daredevil 1. **Desmantelar la operación de Kingpin en Hell´s Kitchen** - **Descripción:** Investigar y recolectar evidencia de las actividades criminales de Kingpin para entregarlas a las autoridades. - **Prioridad:** Alta - **Fecha límite:** 2025-02-15 2. **Proteger a un testigo clave** - **Descripción:** Asegurar la seguridad de un testigo que tiene información vital para un juicio contra una organización criminal. - **Prioridad:** Alta - **Fecha límite:** 2025-02-05 3. **Desmantelar un laboratorio de drogas** - **Descripción:** Localizar y destruir un laboratorio oculto utilizado por una pandilla para fabricar y distribuir drogas en Hell´s Kitchen. - **Prioridad:** Media - **Fecha límite:** 2025-01-30 Al archivo README.md le agregaremos: - [daredevil](/misiones/daredevil.md) Luego, al archivo descripciones.md le vamos a agregar: ## Daredevil - **Nombre real:** Matthew Michael Murdock. - **Descripción:** Un abogado ciego que combate el crimen en Hell´s Kitchen como Daredevil, usando sus sentidos sobrehumanos y habilidades de combate excepcionales. Después, en el archivo origenes.md añadimos: ## Daredevil - Tras un accidente con químicos tóxicos, perdió la vista pero desarrolló sentidos sobrehumanos. Por último, en el archivo debilidades agregamos: ## Daredevil - Dependencia de los sentidos aumentados. - Falta de protección física. Haciendo una verificación de los cambios. git s ## main MM README.md MM debilidades.md MM descripciones.md A misiones/doctor_strange.md MM origenes.md ?? misiones/daredevil.md Veremos que hay algunos cambios que ya se agregaron al Satge, los referentes a la entrada de números imaginarios, pero también encontramos cambios en el directorio de trabajo, los que se acaban de añadir, junto a la adición de los archivos misiones/doctor_strange.md y misiones/daredevil.md. Le daremos seguimiento a las misiones de Daredevil: git add misiones/daredevil.md Comprovamos que no quede nada mos agregar al stage. git s ## main MM README.md MM debilidades.md MM descripciones.md A misiones/daredevil.md A misiones/doctor_strange.md MM origenes.md Ahora haremos un nuevo commit con el siguiente comando. git commit -am &quot;se unen Doctor Strange y Daredevil&quot; [main 8727c32] se unen Doctor Strange y Daredevil 6 files changed, 66 insertions(+) create mode 100644 misiones/daredevil.md create mode 100644 misiones/doctor_strange.md Con esto hemos cambiado el registro que teníamos por uno más completo, en el cuál agregamos tanto a Doctor Strange como a Daredevil. Veamos como se reflejan estos cambios en los registros: git lg * 8727c32 - (hace 38 segundos) se unen Doctor Strange y Daredevil - [Nombre de usuario] (HEAD -&gt; main) * a2427e8 - (hace 18 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] * 43b3a69 - (hace 19 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 19 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 19 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 20 minutos) README.md agregado - [Nombre de usuario]% Luego de todo esto notamos que algo anda mal con los registros y que el último punto estable fue tras agregar debilidades.md por lo que vamos a copiar su [hash] de registro y esta vez usaremos: git reset --mixed [hash] Cambios fuera del área de stage tras el reset: M README.md M debilidades.md M descripciones.md M origenes.md Lo que nos regresará al punto que marcamos pero esta vez con los cambios realizados fuera del Stage, así mantenemos los cambios en el directorio de trabajo. Aquí podemos ver el el estado del repositorio. git s ## main M README.md M debilidades.md M descripciones.md M origenes.md ?? misiones/ También veamos como quedan los registros del repositorio. git lg * 43b3a69 - (hace 20 minutos) debilidades.md agregado - [Nombre de usuario] (HEAD -&gt; main) * c691147 - (hace 20 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 21 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 21 minutos) README.md agregado - [Nombre de usuario]% Como los cambios realizados después de este punto realmente no van a servirnos, haremos un reset, al mismo commit en el que nos ubicamos, pero de una manera distinta. git resset --hard [hash] HEAD está ahora en 43b3a69 debilidades.md agregado Esta vez el repositorio queda tal cual como Git lo registró y los cambios realizados tras este commit han sido removidos. Continuamos regresando en el tiempo a los commits donde se agregaron origenes.md y una vez más a donde añadimos descripciones.md, ya que es en este punto donde parece que se originan los problemas que presenta el registro. Llegados a este punto resulta que no había nada malo en el registro y hay que volver al punto en el que estábamos originalmente para recuperar toda nustra línea del tiempo; puede parecer imposible ya que eliminamos los registros que ya teníamos y tendremos que hacer cada cambio de nuevo pero Git mantiene un historial con los cambios hechos en los propios registros lo que permite recuperar esa información que se podría considerar perdida. Notemos que al acceder al historial de commits no podemos ver mas allá del segundo. git lg * ec89c02 - (hace 23 minutos) descripciones.md agregado - [Nombre de usuario] (HEAD -&gt; main) * ac02fe0 - (hace 23 minutos) README.md agregado - [Nombre de usuario]% Pero Git tiene otro comando para acceder a los registros, uno que rastrea cambios de los propios registros y los movimientos en ellos. git reflog ec89c02 (HEAD -&gt; main) HEAD@{0}: reset: moving to ec89c02 c691147 HEAD@{1}: reset: moving to c691147 43b3a69 HEAD@{2}: reset: moving to 43b3a69 43b3a69 HEAD@{3}: reset: moving to 43b3a69 8727c32 HEAD@{4}: commit: se unen Doctor Strange y Daredevil a2427e8 HEAD@{5}: reset: moving to a2427e8 9c59afe HEAD@{6}: commit: Se une Deoctor Strange a2427e8 HEAD@{7}: commit (amend): misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. ec9ece0 HEAD@{8}: commit: misiones/ agregado 43b3a69 HEAD@{9}: commit: debilidades.md agregado c691147 HEAD@{10}: commit: origenes.md agregado ec89c02 (HEAD -&gt; main) HEAD@{11}: commit: descripciones.md agregado ac02fe0 HEAD@{12}: commit (initial): README.md agregado Muestra un historial de los movimientos y cambios de referencia en el repositorio. En la primer columna se nos muestran los hash correspondientes a cada commit registrado por Git. Vamos a buscar el [hash] correspondiente al commt que debemos recuperar, registrado con el mensaje se unen Doctor Strange y Daredevil, luego utilizamos: git reset --hard [hash] Para recuperar toda la linea de registro hasta ahora, lo que podemos verificar con: git lg * 8727c32 - (hace 6 minutos) se unen Doctor Strange y Daredevil - [Nombre de usuario] (HEAD -&gt; main) * a2427e8 - (hace 23 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] * 43b3a69 - (hace 24 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 24 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 24 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 25 minutos) README.md agregado - [Nombre de usuario]% 4.3 Cambiar de nombre y eliminar archivos En el desarrollo es muy recurrente la necesidad de cambiarle el nombre a algunos archivos así como eliminarlos por distintas causas, esta vez aprenderemos a hacerlo de manera que Git se mantenga al tando de estos cambios, tanto si fueron realizados mediante Git o fuera del mismo. 4.3.1 Mediante Git Empezamos con la creación de un nuevo archivo de nombre: contactos.md Al cual le vamos a agregar la siguiente entrada: # Lista de Contactos de Emergencia ## Iron Man - **Nombre:** Pepper Potts - **Relación:** CEO de Stark Industries y pareja de Tony Stark - **Contacto:** pepper.potts@starkindustries.com | +1-555-123-4567 ## Thor - **Nombre:** Jane Foster - **Relación:** Astrofísica y expareja sentimental de Thor - **Contacto:** jane.foster@astrophysicsuniv.edu | +1-555-234-5678 ## Hulk - **Nombre:** Betty Ross - **Relación:** Bióloga celular y expareja de Bruce Banner - **Contacto:** bross@researchinstitute.com | +1-555-345-6789 ## Black Widow - **Nombre:** Yelena Belova - **Relación:** Hermana adoptiva y compañera en misiones - **Contacto:** yelena.b@redroomlegacy.org | +1-555-456-7890 ## Spider-Man - **Nombre:** Aunt May - **Relación:** Tía y figura materna de Peter Parker - **Contacto:** may.parker@nyccommunitycenter.org | +1-555-567-8901 ## Doctor Strange - **Nombre:** Wong - **Relación:** Bibliotecario y compañero Hechicero Supremo adjunto - **Contacto:** wong@sorcerersanctum.com | +1-555-678-9012 ## Daredevil - **Nombre:** Foggy Nelson - **Relación:** Mejor amigo y socio legal de Matt Murdock - **Contacto:** foggy.nelson@nelsonandmurdock.com | +1-555-789-0123 Agregamos este archivo al area de preparación git add contactos.md Hacemos un commit git commit -m &quot;contactos de emergencia agregados&quot; [main 1c7fe32] contactos de emergencia agregados 1 file changed, 43 insertions(+) create mode 100644 contactos.md Notamos que contactos es un nombre impreciso para la lista, por lo que cambiamos el nombre del archivo: git mv contactos.md contactos-emergencia.md Viemdo el estado del repositorio git s ## main R contactos.md -&gt; contactos-emergencia.md La R indica que el archivo fue renombrado. Ahora hacemos un nuevo commit del archivo renombrado git commit -m &quot;contactos.md renombrado&quot; [main 2d05f6e] contactos.md renombrado 1 file changed, 0 insertions(+), 0 deletions(-) rename contactos.md =&gt; contactos-emergencia.md (100%) Veamos el historial de registros git lg * 2d05f6e - (hace 18 segundos) contactos.md renombrado - [Nombre de usuario] (HEAD -&gt; main) * 1c7fe32 - (hace 57 segundos) contactos de emergencia agregados - [Nombre de usuario] * 8727c32 - (hace 8 minutos) se unen Doctor Strange y Daredevil - [Nombre de usuario] * a2427e8 - (hace 26 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] * 43b3a69 - (hace 26 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 27 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 27 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 28 minutos) README.md agregado - [Nombre de usuario]% Dado que es peligroso tener una lista de las personas más cercanas a nuestros héroes, se toma la decisión de eliminal dicha lista. git rm contactos-emergencia.md rm &#39;contactos-emergencia.md&#39; 4.3.2 Fuera de Git Esta es la manera más común de eliminar y renombrar archivos. Para no repetir los pasos anteriores, ahora vamos a trabajar con el subdirectorio misiones en el que encontramos misiones asignadas a cada héroe, resulta que Spider-Man ha terminado sus misione, por lo que cambiaremos el nombre de su archivo por: spider_man-Completados.md Este cambio, al hacer un git s / git status, a diferencia de la vez anterior aparecerá de una forma peculiar git s ## main D misiones/spider_man.md ?? misiones/spider_man-Completados.md Parece que Git no reconoce lo que hicimos como un renombramiento del archivo, sio que hemos eliminado spider_man.md y se ha creado un nuevo archivo, que aún no tiene seguimieto, llamado spider_man-Completados.md. No hay porque alarmarse con esto, utilizando git add . Git, al ver que el contenido de los archivos es idéntico, cambiará el tipo de registro a “renombrado” y podemos verificarlo usando git s ## HEAD (sin rama) R misiones/spider_man.md -&gt; misiones/spider_man-Completados.md En este caso la R indica que Git ha registrado el cambio como renombramiento, casi siempre funciona así, si en algún caso Git no registra este cmbio como “renombrado” hay que volver un paso atras, empleando git restore --staged y hacer este renombramiento mediante Git. Ahora, queda hacer el commit git commit -m &quot;misiones de Spider-Man completadas&quot; [main e31eae6] misiones de Spider-Man completadas 1 file changed, 0 insertions(+), 0 deletions(-) rename misiones/{spider_man.md =&gt; spider_man-Completados.md} (100%) viendo como queda el registro git lg * e31eae6 - (hace 21 segundos) misiones de Spider-Man completadas - [Nombre de usuario] (HEAD -&gt; main) * 0059540 - (hace 52 segundos) contactos.md eliminado - [Nombre de usuario] * 2d05f6e - (hace 4 minutos) contactos.md renombrado - [Nombre de usuario] * 1c7fe32 - (hace 5 minutos) contactos de emergencia agregados - [Nombre de usuario] * 8727c32 - (hace 12 minutos) se unen Doctor Strange y Daredevil - [Nombre de usuario] * a2427e8 - (hace 29 minutos) misiones/ agregado -&gt; misiones de los heroes: iron man, thor, hulk, black widow y spider man. - [Nombre de usuario] * 43b3a69 - (hace 30 minutos) debilidades.md agregado - [Nombre de usuario] * c691147 - (hace 31 minutos) origenes.md agregado - [Nombre de usuario] * ec89c02 - (hace 31 minutos) descripciones.md agregado - [Nombre de usuario] * ac02fe0 - (hace 31 minutos) README.md agregado - [Nombre de usuario]% como las misiones del archivo spider_man-Completados.md ya no se encuentran activas, se elimina tal archivo, despues de hacer el registro crearemos un nuevo archivo de asignaciones para Spider-Man. git s ## main D misiones/spider_man-Completados.md Veamos que Git ha registrado lo que hicimos como una eliminación del archivo spider_man-Completados.md, continuamos creando un archivo limpio de asignaciones para Spider-Man y agregando los cambios al Stage git add . y hacemos el correspondiente commit git commit -m &quot;sin saignaciones para Spider-Man&quot; [main c9ffd15] sin saignaciones para Spider-Man 2 files changed, 1 insertion(+), 18 deletions(-) delete mode 100644 misiones/spider_man-Completados.md create mode 100644 misiones/spider_man.md Así es como se eliminan y renombran archivos tanto mediante como fuera de Git. 4.4 Ignorar archivos no deseados En muchas ocaciones, dentro del proceso de desarrollo, tenemos archivos e incluso directorios a los que no nos interesa darles seguimiento; vamos a crear unos cuantos archivos y directorios de ejemplo con el objetivo de hacer que git ignore estos elementos y no regstre los cambios pesentes en ellos. Vamos a crear los siguientes directorios: dist node_modules Dentro de node_modules vamos a crear el directorio vue Ahora crearemos los archivos: server.log Aquí vamos a meter como entrada, arbitrariamente, los diguientes logs 012038239123: Exploto el equipo... 012038239123: Exploto el equipo... 012038239123: Exploto el equipo... 012038239123: Exploto el equipo... 012038239123: Exploto el equipo... 012038239123: Exploto el equipo... dentro de dist creamos index.html Que estará vacío. Por último dentro de vue, subdirectorio de node_modules creamos app.module.ts react.jsx vue.vue Estos archivos y directorios no necesitan tener sentido, y no lo tienen en este contexto pero son ejemplos de directorios o archivos comunes en proyectos que no requieren un seguimiento de los cambios presentes en ellos por diversas razones, están aqui simplemente para aprender a hacer que gir ignore los elementos que no nesesitamos que tengan ub rastreo. Veamos primero el estado del repositorio git s ## main ?? dist/ ?? node_modules/ ?? server.log 4.4.1 Archivo .gitignore Vamos a presentar el archivo .gitignore, que nos premitirá enlistar archivos y directorios que Git va a ignorar, muy útil para facilitar esta tarea. Veamos como funciona. Vamos a crear el archivo .gitignore y en este vamos a agregar la siguiente entrada: dist/ node_modules/ server.log Una vez creado el archivo, al revisar el estado del repositorio veremos que tenemos una respuesta muy distinta a la última que tuvimos git s ## main ?? .gitignore Ahora no aparecen lo elementos creados anteriormente y simplemente nos encontramos con el archivo .gitignore al que si es necesario darle seguimiento por lo que haremos su correspondiente registro. git add .gitignore git commit -m &quot;.gitignore agregado&quot; [main 2ed8cf4] .gitignore agregado 1 file changed, 4 insertions(+) create mode 100644 .gitignore Ahora, para ver un poco de la sintaxis dentro de .gitignore vamos a crear un par de nuevos archivos a los que no se les va a dar seguimiento: application.log system.log Como no queremos que se les de seguimiento a estos archivos, hay que agregarlo al .gitignore, pero esta vez en vez de agregarlos uno por unlo cambiaremos la línea server.log por *.log de forma que el contenideo de .gitignore quedaría así: dist/ node_modules/ *.log Con este cambio le decimos a git que ignore a todos los archivos con extension log sin extender el contenido del archivo .gitignore veamos como percibe estos cambios Git: git s ## main M .gitignore Notemos que, aunque creamos dos archivos nuevos, Git solamente rastreó el cambio realizado en el archivo .gitignore. Vamos hacer un commit sobre estos cambios. git commit -am &quot;.gitignore actualizado (extension .log)&quot; [main c20b80d] .gitignore actualizado (extension .log) 1 file changed, 1 insertion(+), 1 deletion(-) Ahora vamos a crear un par de archivos nuevos con la extensión .log para ver como afecta al registro del repositorio; esta vez crearemos los archivos: error.log access.log Y para continuar empleamos: git s ## main Podemos notar que esta vez no se ha registrado ningún cambio realizado en el repositorio, ya que Git ignora cualquier cambio realizado a archivos con extensión .log, esto incluye la cración de nuevos archivos con dicha exensión. 4.5 Resumen Creamos un repositorio y lo preparamos para que Git haga un rastreo de los cambios presentes en sus elementos. Viajamos en los registros realizados anteriormente, hicimos algunos cambios y recuperamos todo el avance que se tenía en un principio. Aprendimos a renombrar y eliminar archivos y directorios de manera que Git pueda rastrear estos cambios de la manera adecuada. Hicimos que Git ignorara archivos a los que no nos interesa darles seguimiento. 4.6 Merge: Fast-forward 4.7 Merge: Unión automática 4.8 Merge: Uniones con conflictos "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
